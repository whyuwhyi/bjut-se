name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 测试阶段
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpass
          MYSQL_DATABASE: wechat_education_test
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
          MYSQL_CHARACTER_SET_SERVER: utf8mb4
          MYSQL_COLLATION_SERVER: utf8mb4_0900_ai_ci
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout代码
      uses: actions/checkout@v4

    - name: 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 安装项目依赖
      run: |
        # 使用我们的统一脚本来安装依赖（包含管理后台）
        chmod +x scripts/dev.sh
        scripts/dev.sh install-deps || {
          # 如果脚本不支持install-deps命令，则使用传统方式
          cd frontend
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi
          cd ../admin-frontend
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi
          cd ../backend
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi
          cd ..
        }

    - name: 运行测试
      run: |
        # 使用我们的统一脚本运行测试
        chmod +x scripts/dev.sh
        scripts/dev.sh test || {
          # 备用方案：直接运行测试
          echo "使用传统方式运行测试"
          cd frontend
          if npm run --silent test:h5 2>/dev/null; then
            npm run test:h5
          else
            echo "前端测试脚本不存在，跳过"
          fi
          cd ..
          
          cd backend
          if npm run --silent test 2>/dev/null; then
            npm test
          else
            echo "后端测试脚本不存在，跳过"
          fi
          cd ..
        }
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 3306
        DB_NAME: wechat_education_test
        DB_USER: testuser
        DB_PASSWORD: testpass
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET: test-secret

    - name: 运行代码质量检查
      run: |
        cd backend
        if npm run --silent lint 2>/dev/null; then
          npm run lint
        else
          echo "Lint脚本不存在，跳过代码质量检查"
        fi

  # 构建阶段
  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout代码
      uses: actions/checkout@v4

    - name: 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 安装依赖
      run: |
        chmod +x scripts/dev.sh
        cd frontend
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi
        cd ../admin-frontend
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi
        cd ..

    - name: 构建前端H5
      run: |
        cd frontend
        npm run build:h5

    - name: 构建管理后台
      run: |
        cd admin-frontend
        npm run build

    - name: 上传前端构建产物
      uses: actions/upload-artifact@v4
      with:
        name: frontend-dist
        path: frontend/dist/build/h5/
        retention-days: 7

    - name: 上传管理后台构建产物
      uses: actions/upload-artifact@v4
      with:
        name: admin-dist
        path: admin-frontend/dist/
        retention-days: 7

  # Docker镜像构建
  docker-build:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout代码
      uses: actions/checkout@v4

    - name: 设置Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 登录容器注册表
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 提取元数据
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend

    - name: 构建并推送后端镜像
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./docker/backend/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 提取前端元数据
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend

    - name: 构建并推送前端镜像
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 提取管理后台元数据
      id: meta-admin
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-admin

    - name: 构建并推送管理后台镜像
      uses: docker/build-push-action@v5
      with:
        context: ./admin-frontend
        file: ./docker/admin-frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-admin.outputs.tags }}
        labels: ${{ steps.meta-admin.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 部署到服务器
  deploy:
    needs: [docker-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    environment: production
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4

    - name: 部署到服务器
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          cd /opt/wechat-education
          
          # 备份当前版本
          if [ -d "current" ]; then
            mv current backup-$(date +%Y%m%d-%H%M%S)
          fi
          
          # 使用git获取最新代码
          echo "获取最新代码..."
          if [ -d "current" ]; then
            rm -rf current
          fi
          if git clone https://github.com/${{ github.repository }}.git current; then
            echo "✅ 代码获取成功"
          else
            LATEST_BACKUP=$(ls -t backup-* 2>/dev/null | head -n 1)
            if [ -n "$LATEST_BACKUP" ] && [ -d "$LATEST_BACKUP" ]; then
              cp -r "$LATEST_BACKUP" current
              echo "⚠️ Git克隆失败，使用最新备份: $LATEST_BACKUP"
            else
              echo "❌ Git克隆失败且无备份可用"
              exit 1
            fi
          fi
          cd current
          
          # 创建环境配置
          if [ -f .env.production ]; then
            cp .env.production .env
          elif [ -f .env.example ]; then
            cp .env.example .env
          else
            echo "警告: 没有找到环境配置模板"
          fi
          
          # 设置镜像环境变量
          export BACKEND_IMAGE=ghcr.io/${{ github.repository }}-backend:main
          export FRONTEND_IMAGE=ghcr.io/${{ github.repository }}-frontend:main
          export ADMIN_IMAGE=ghcr.io/${{ github.repository }}-admin:main
          
          echo "使用镜像："
          echo "Backend: $BACKEND_IMAGE"
          echo "Frontend: $FRONTEND_IMAGE" 
          echo "Admin: $ADMIN_IMAGE"
          
          # 登录GitHub Container Registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # 停止旧服务
          docker-compose -f docker/docker-compose.prod.yml down 2>/dev/null || true
          
          # 清理旧容器和应用镜像
          echo "清理旧资源..."
          docker container prune -f
          docker image prune -f
          
          # 拉取最新镜像
          echo "拉取最新镜像..."
          docker-compose -f docker/docker-compose.prod.yml pull
          
          # 启动新服务（使用预构建镜像）
          echo "启动服务..."
          docker-compose -f docker/docker-compose.prod.yml up -d
          
          # 等待服务启动
          sleep 30
          
          # 等待服务启动
          echo "等待服务启动..."
          sleep 60
          
          # 健康检查 - 检查容器状态而不是HTTP端点
          max_attempts=6
          attempt=1
          all_healthy=false
          
          while [ $attempt -le $max_attempts ]; do
            echo "检查第 $attempt/$max_attempts 次..."
            
            # 检查所有服务是否健康
            backend_healthy=$(docker-compose -f docker/docker-compose.prod.yml ps backend | grep -c "Up.*healthy" || echo "0")
            frontend_healthy=$(docker-compose -f docker/docker-compose.prod.yml ps frontend | grep -c "Up.*healthy" || echo "0")
            admin_healthy=$(docker-compose -f docker/docker-compose.prod.yml ps admin-frontend | grep -c "Up.*healthy" || echo "0")
            nginx_healthy=$(docker-compose -f docker/docker-compose.prod.yml ps nginx | grep -c "Up.*healthy" || echo "0")
            mysql_healthy=$(docker-compose -f docker/docker-compose.prod.yml ps mysql | grep -c "Up.*healthy" || echo "0")
            redis_healthy=$(docker-compose -f docker/docker-compose.prod.yml ps redis | grep -c "Up.*healthy" || echo "0")
            
            echo "容器健康状态: Backend($backend_healthy) Frontend($frontend_healthy) Admin($admin_healthy) Nginx($nginx_healthy) MySQL($mysql_healthy) Redis($redis_healthy)"
            
            if [ "$backend_healthy" = "1" ] && [ "$frontend_healthy" = "1" ] && [ "$admin_healthy" = "1" ] && [ "$nginx_healthy" = "1" ] && [ "$mysql_healthy" = "1" ] && [ "$redis_healthy" = "1" ]; then
              echo "✅ 所有容器健康检查通过"
              
              # 额外检查：确保API可用
              if curl -f http://localhost/api/v1/health --connect-timeout 10 --max-time 30 2>/dev/null; then
                echo "✅ 后端API健康检查通过"
              else
                echo "⚠️ 后端API健康检查失败，但容器状态正常，继续部署"
              fi
              
              # 检查前端页面
              if curl -f http://localhost/ --connect-timeout 10 --max-time 30 2>/dev/null; then
                echo "✅ 前端服务可访问"
              else
                echo "⚠️ 前端服务访问失败"
              fi
              
              # 检查管理后台
              if curl -f http://localhost/admin/ --connect-timeout 10 --max-time 30 2>/dev/null; then
                echo "✅ 管理后台可访问"
              else
                echo "⚠️ 管理后台访问失败"
              fi
              
              all_healthy=true
              break
            else
              echo "容器尚未完全健康，等待15秒..."
              sleep 15
              attempt=$((attempt + 1))
            fi
          done
          
          if [ "$all_healthy" = "true" ]; then
            echo "✅ 部署成功！"
            
            # 强制清理浏览器和CDN缓存
            echo "清理缓存..."
            
            # 通过在主页添加时间戳参数来强制浏览器更新
            TIMESTAMP=$(date +%s)
            curl -s "http://localhost/?v=$TIMESTAMP" > /dev/null || true
            curl -s "http://localhost/admin/?v=$TIMESTAMP" > /dev/null || true
            
            # 如果使用Cloudflare，可以通过API清理缓存（需要配置API密钥）
            # curl -X POST "https://api.cloudflare.com/client/v4/zones/{zone_id}/purge_cache" \
            #   -H "Authorization: Bearer {api_token}" \
            #   -H "Content-Type: application/json" \
            #   --data '{"purge_everything":true}'
            
            echo "缓存清理完成"
            
            # 清理旧备份（保留最近3个）
            cd ..
            echo "清理旧备份..."
            BACKUP_COUNT=$(ls -1d backup-* 2>/dev/null | wc -l)
            echo "当前备份数量: $BACKUP_COUNT"
            if [ "$BACKUP_COUNT" -gt 3 ]; then
              echo "保留最近3个备份，删除其他备份"
              ls -dt backup-* | tail -n +4 | xargs rm -rf 2>/dev/null || true
              echo "清理完成，剩余备份:"
              ls -dt backup-* 2>/dev/null || echo "无备份文件"
            else
              echo "备份数量未超过限制，无需清理"
            fi
            cd current
            exit 0
          fi
          
          echo "❌ 部署失败，服务健康检查未通过，开始回滚..."
          docker-compose -f docker/docker-compose.prod.yml logs --tail=50
          docker-compose -f docker/docker-compose.prod.yml down
          
          # 回滚到最新的备份版本
          cd ..
          echo "当前目录: $(pwd)"
          echo "查找备份文件:"
          ls -la | grep backup || echo "无备份文件"
          
          # 修复备份查找逻辑
          if ls backup-* >/dev/null 2>&1; then
            LATEST_BACKUP=$(ls -dt backup-* | head -n 1)
            echo "找到最新备份: $LATEST_BACKUP"
            
            if [ -d "$LATEST_BACKUP" ]; then
              echo "开始回滚到备份版本: $LATEST_BACKUP"
              rm -rf current
              cp -r "$LATEST_BACKUP" current
              cd current
              
              # 确保环境配置存在
              if [ -f .env.production ]; then
                cp .env.production .env
              elif [ -f .env.example ]; then
                cp .env.example .env
              else
                echo "警告: 没有找到环境配置文件"
              fi
              
              echo "重新启动服务..."
              docker-compose -f docker/docker-compose.prod.yml up -d
              echo "🔄 已回滚到备份版本: $LATEST_BACKUP"
            else
              echo "❌ 备份目录不存在: $LATEST_BACKUP"
            fi
          else
            echo "❌ 没有找到任何备份文件"
          fi
          exit 1

  # 通知
  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 发送部署通知
      if: github.ref == 'refs/heads/main'
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ 部署成功！应用已更新到最新版本。"
        else
          echo "❌ 部署失败！请检查日志。"
        fi